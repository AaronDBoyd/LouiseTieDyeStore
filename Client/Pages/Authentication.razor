@page "/authentication/{action}"
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IAuthService AuthService
@inject ICartService CartService
@inject IMessageService MessageService
@inject ILocalStorageService LocalStorage


<h3>Authenticating...</h3>

<RemoteAuthenticatorView 
    Action="@Action" 
    OnLogInSucceeded="LoggedIn">

    <LogOut>
        @{
            LogOut();
        }
    </LogOut>    
    <LogOutSucceeded>
        <AuthorizeView>           
            <NotAuthorized>
                @{
                   SuccessfullyLoggedOut();
                }
            </NotAuthorized>
        </AuthorizeView>
    </LogOutSucceeded>
</RemoteAuthenticatorView>

@code {
    [Parameter] 
    public string Action { get; set; }

    private async Task LoggedIn()
    {
        await AuthService.CheckInUser();
        await AuthService.StoreSessionIdToken();
        await CartService.StoreCartItems(true);
        await CartService.GetCartItemsCount();
        if (await AuthService.IsUserAnAdmin())
        {
            await MessageService.GetUnreadMessagesCount();
        }

        string returnUrl = await LocalStorage.GetItemAsync<string>("returnUrl");

        await LocalStorage.RemoveItemAsync("returnUrl");

        Navigation.NavigateTo($"{returnUrl ?? string.Empty}", true);
    }

    private async Task LogOut()
    {
        var authority = (string)Configuration["Auth0:Authority"];
        var clientId = (string)Configuration["Auth0:ClientId"];
        var callbackUrl = $"{(string)Configuration["ActiveDomain"]}/authentication/logged-out";
        Console.WriteLine("!!! callbackUrl: " + JsonConvert.SerializeObject(callbackUrl));

        var idToken = await LocalStorage.GetItemAsync<string>("id_token");

        //Navigation.NavigateTo($"{authority}/v2/logout?client_id={clientId}");
        Navigation.NavigateTo($"{authority}/oidc/logout?id_token_hint={idToken}&post_logout_redirect_uri={callbackUrl}");
    }

    private async Task SuccessfullyLoggedOut()
    {
        await LocalStorage.RemoveItemAsync("id_token");
        await CartService.GetCartItemsCount();
        Navigation.NavigateTo("");
    }
}
