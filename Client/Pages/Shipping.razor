@page "/shipping"
@inject IJSRuntime JsRuntime
@inject ICartService CartService
@inject ISalesTaxService TaxService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject IShippingService ShippingService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@implements IDisposable

@using Newtonsoft.Json

<div class="container">
    @if (cartProducts == null || cartProducts.Count == 0)
    {
        <h3 class="text-center">@message</h3>
    }
    else
    {
        <div class="shipping-checkout-grid">
            <div class="shipping">
                <div class="shipping-header">
                    <h3>Shipping Information <span class="@EditShippingCssClass"><i class="oi oi-check"></i></span></h3>
                    <button class="@EditShippingCssClass" @onclick="EditShipping">Edit</button>
                </div>

                @if (isLoading)
                {
                    <div class="spinner-grow text-dark m-5" role="status">
                        <span class="ms-5 h2">Processing...</span>
                    </div>
                }
                else
                {
                    @**** TODO: Style Form ****@
                    <div class="shipping-form-wrapper @ConfirmShippingCssClass">

                        <h5 class="m-3">Enter Shipping Postal Code and State to determine Shipping Cost and Sales Tax</h5>
                        <br />
                        <h6 class="text-danger">@message</h6>
                        <EditForm Model="shippingInfo" class="shipping-form" OnValidSubmit="ConfirmShipping" OnInvalidSubmit="InvalidSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="zip">ZIP Code<span class="reqAst">*</span></label>
                                <InputText id="zip" type="text" @bind-Value="shippingInfo.Zip" class="form-control input" style="border-radius: 255px;" />
                            </div>

                            <div class="form-state">
                                <div class="mb-3">
                                    <label for="state">State<span class="reqAst">*</span></label>
                                    <InputSelect class="form-select select" @bind-Value="shippingInfo.State" name="state" id="state" style="border-radius: 255px;">
                                        <option>Select State</option>
                                        <option value="AL">Alabama</option>
                                        <option value="AK">Alaska</option>
                                        <option value="AZ">Arizona</option>
                                        <option value="AR">Arkansas</option>
                                        <option value="CA">California</option>
                                        <option value="CO">Colorado</option>
                                        <option value="CT">Connecticut</option>
                                        <option value="DE">Delaware</option>
                                        <option value="DC">District Of Columbia</option>
                                        <option value="FL">Florida</option>
                                        <option value="GA">Georgia</option>
                                        <option value="HI">Hawaii</option>
                                        <option value="ID">Idaho</option>
                                        <option value="IL">Illinois</option>
                                        <option value="IN">Indiana</option>
                                        <option value="IA">Iowa</option>
                                        <option value="KS">Kansas</option>
                                        <option value="KY">Kentucky</option>
                                        <option value="LA">Louisiana</option>
                                        <option value="ME">Maine</option>
                                        <option value="MD">Maryland</option>
                                        <option value="MA">Massachusetts</option>
                                        <option value="MI">Michigan</option>
                                        <option value="MN">Minnesota</option>
                                        <option value="MS">Mississippi</option>
                                        <option value="MO">Missouri</option>
                                        <option value="MT">Montana</option>
                                        <option value="NE">Nebraska</option>
                                        <option value="NV">Nevada</option>
                                        <option value="NH">New Hampshire</option>
                                        <option value="NJ">New Jersey</option>
                                        <option value="NM">New Mexico</option>
                                        <option value="NY">New York</option>
                                        <option value="NC">North Carolina</option>
                                        <option value="ND">North Dakota</option>
                                        <option value="OH">Ohio</option>
                                        <option value="OK">Oklahoma</option>
                                        <option value="OR">Oregon</option>
                                        <option value="PA">Pennsylvania</option>
                                        <option value="RI">Rhode Island</option>
                                        <option value="SC">South Carolina</option>
                                        <option value="SD">South Dakota</option>
                                        <option value="TN">Tennessee</option>
                                        <option value="TX">Texas</option>
                                        <option value="UT">Utah</option>
                                        <option value="VT">Vermont</option>
                                        <option value="VA">Virginia</option>
                                        <option value="WA">Washington</option>
                                        <option value="WV">West Virginia</option>
                                        <option value="WI">Wisconsin</option>
                                        <option value="WY">Wyoming</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div></div>
                            <div class="form-submit">
                                <button type="submit" class="btn btn-dark">
                                    Confirm Shipping Info
                                </button>
                            </div>
                            <ValidationSummary />
                        </EditForm>
                    </div>

                    <div class="confirmed-address @EditShippingCssClass">

                        @if (isLocal)
                        {
                            <div class="text-center text-info border border-3 p-2">
                                <h3>Since you're local there is no shipping cost. </h3>
                                <h3> I will contact you and deliver it myself.</h3>
                            </div>
                        }
                        
                        <div class="ship-to m-3">
                            Enter Full Shipping info at Checkout:
                        </div>
                        
                        @* <div class="ship-to">
                            Ship to:
                        </div> *@

                        @* TODO: Format *@
                        @* <div class="address">  *@
                            @* <div class="name">@address.FirstName @address.LastName</div>
                            <div class="addressOne">@(address.LineOne), </div>
                            <div class="addressTwo">@address.LineTwo</div>
                            <div class="city-state-zip">@(address.City), @(address.State) @(address.Zip)</div>
                            <div class="phone">@address.PhoneNumber</div> *@
                        @* </div> *@
                    </div>
                    <div>
                        <button type="button" class="btn proceed-btn @EditShippingCssClass" @onclick="PlaceOrder">Proceed to Checkout</button>
                    </div>
                }
            </div>

            <div class="checkout-info">
                <div class="order-summary">
                    <h3>Order Summary</h3>
                    <hr />
                    <table>
                        <tbody>
                            <tr>
                                <th class="subtotal-key">
                                    subtotal
                                </th>
                                <td class="subtotal-value">$@subTotal</td>
                            </tr>
                            <tr>
                                <th class="shipping-key">
                                    shipping
                                </th>
                                @if (!shippingCalculated)
                                {
                                    <td class="shipping-value">Calculated by Shipping</td>
                                }
                                else
                                {
                                    <td class="shipping-value">$@shippingCost.ToString("0.00")</td>
                                }

                            </tr>
                            <tr>
                                <th class="taxes-key">
                                    taxes
                                </th>
                                @if (!taxCalculated)
                                {
                                    <td class="taxes-value">Calculated by Shipping</td>
                                }
                                else
                                {
                                    <td class="taxes-value">$@salesTax.ToString("0.00")</td>
                                }
                            </tr>
                        </tbody>
                    </table>
                    <br />
                    <hr />
                    <table>
                        <tbody>
                            <tr>
                                <th class="total-key">
                                    Estimated Total
                                </th>
                                <td class="total-value">
                                    $@(subTotal + shippingCost + salesTax)
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="cart-info">
                    <div class="cart-header">
                        <div class="cart-count">
                            <h3>Cart (@cartProducts.Count)</h3>
                        </div>
                        <div class="edit-cart">
                            <a href="/cart">Edit</a>
                        </div>
                    </div>
                    <hr />

                    @* TODO: item card spacing *@
                    <div class="cart-items">

                        @foreach (var product in cartProducts)
                        {
                            <div class="item">
                                <div class="item-img-wrapper">
                                    <img class="item-img" src="@product.ImageUrl" />
                                </div>
                                <div class="item-details">
                                    <div class="title">
                                        @product.Title
                                    </div>
                                    <div class="description">
                                        @{
                                            var lines = product.Description.Split("\n").ToList();
                                            foreach (var line in lines)
                                            {
                                                <p>@line</p>
                                            }
                                        }
                                    </div>
                                    <div class="size">
                                        Size: @product.Size
                                    </div>
                                    <div class="price">
                                        $@product.Price
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ShippingInfoDTO shippingInfo = new();
    List<CartProductResponse> cartProducts = new List<CartProductResponse>();
    decimal subTotal = default;
    decimal shippingCost = default;
    decimal salesTax = default;
    decimal totalPrice = default;
    bool taxCalculated = false;
    bool shippingCalculated = false;
    bool isLocal = false;

    string message = string.Empty;

    event Action OnChange;


    private bool confirmShipping = false;
    private bool editShipping = true;
    private bool isLoading = false;

    private string? ConfirmShippingCssClass => confirmShipping ? "hide" : null;
    private string? EditShippingCssClass => editShipping ? "hide" : null;

    protected override async Task OnInitializedAsync()
    {
        OnChange += StateHasChanged;
        await LoadCart();
    }

    private async Task LoadCart()
    {
        cartProducts = await CartService.GetCartProducts();
        await CartService.GetCartItemsCount();
        subTotal = cartProducts.Sum(p => p.Price);
        shippingInfo.ItemCount = cartProducts.Count;

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "** Your cart is empty. Selected Items may have already been purchased. **";
        }
    }

    private void InvalidSubmit()
    {
        Console.WriteLine("Invalid Submit");
    }

    private async void ConfirmShipping()
    {
        confirmShipping = !confirmShipping;
        editShipping = !editShipping;
        isLoading = true;

        await JsRuntime.InvokeVoidAsync("scrollUp");

        salesTax = await TaxService.CalculateSalesTax(subTotal, shippingInfo.State);
        taxCalculated = true;

        if (ShippingService.LocalZipCodes.Contains(shippingInfo.Zip))
        {
            shippingCost = default;
            isLocal = true;
        }
        else
        {
            var shippingCostResponse = await ShippingService.GetShippingCost(shippingInfo);

            //Console.WriteLine("!!! Response: " + shippingCostResponse);

            if (decimal.TryParse(shippingCostResponse, out decimal cost))
            {
                shippingCost = Math.Round(cost, 2);
                //Console.WriteLine("!!! Cost: " + shippingCost);
            }
            else
            {
                message = "Invalid Zip Code";
                confirmShipping = !confirmShipping;
                editShipping = !editShipping;
            }
        }

        shippingCalculated = true;

        isLoading = false;
        OnChange.Invoke();

        await Task.Delay(5000);
        message = string.Empty;

        OnChange.Invoke();
    }

    private async Task PlaceOrder()
    {
        await LoadCart();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "** Your cart is empty. Selected Items may have already been purchased. **";

            await JsRuntime.InvokeVoidAsync("scrollUp");

            return;
        }

        var checkout = new CheckoutDTO
            {
                SalesTax = await TaxService.CalculateSalesTax(subTotal, shippingInfo.State),
                ShippingCost = ShippingService.LocalZipCodes.Contains(shippingInfo.Zip) ? default : decimal.Parse(await ShippingService.GetShippingCost(shippingInfo))
            };

        foreach (var product in cartProducts)
        {
            checkout.Items.Add(new CheckoutItem
            {
                    Title = product.Title,
                    Price = product.Price,
                    ImageUrl = product.ImageUrl
            });
        }

        if (await AuthService.IsUserAuthenticated())
        {
            checkout.UserEmail = await AuthService.GetAuthenticatedUsername();
        }
        else
        {
            checkout.UserEmail = await LocalStorage.GetItemAsync<string>("guestCheckoutEmail");
        }

        // Get redirect URL from Stripe
        string url = await OrderService.PlaceOrder(checkout);

        await CartService.StoreCartItems();

        NavigationManager.NavigateTo(url);
    }

    private void EditShipping()
    {
        editShipping = !editShipping;
        confirmShipping = !confirmShipping;
    }

    public void Dispose()
    {
        OnChange -= StateHasChanged;
    }
}
