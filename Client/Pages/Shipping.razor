@page "/shipping"
@inject IJSRuntime JsRuntime
@inject ICartService CartService
@implements IDisposable

@using Newtonsoft.Json

<div class="container">
    <div class="shipping-checkout-grid">
        <div class="shipping">
            <div class="shipping-header">
                <h3>Shipping Information <span class="@EditShippingCssClass"><i class="oi oi-check"></i></span></h3>
                <button class="@EditShippingCssClass" @onclick="EditShipping">Edit</button>
            </div>

            @* TODO: Add Loading Modal or something while costs are calculated *@

            @**** TODO: Style Form ****@
            <div class="shipping-form-wrapper @ConfirmShippingCssClass">
                <EditForm Model="address" class="shipping-form" OnValidSubmit="ConfirmShipping" OnInvalidSubmit="InvalidSubmit">
                    <DataAnnotationsValidator />
                    @* <div class="form-name"> *@
                    <div class="mb-3">
                        <label for="firstName">First Name<span class="reqAst">*</span></label>
                        <InputText id="firstName" @bind-Value="address.FirstName" class="form-control input" />
                    </div>
                    <div class="mb-3">
                        <label for="lastName">Last Name<span class="reqAst">*</span></label>
                        <InputText id="lastName" @bind-Value="address.LastName" class="form-control input" />
                    </div>
                    @* </div> *@
                    <div class="form-phoneNumber">
                        <div class="mb-3">
                            <label for="phoneNumber">Phone Number<span class="reqAst">*</span></label>
                            <InputText id="phoneNumber" type="tel" @bind-Value="address.PhoneNumber" class="form-control input" />
                        </div>
                    </div>
                    <div>
                    </div>
                    @* <div class="form-address"> *@
                    <div class="mb-3">
                        <label for="addressOne">Address Line 1<span class="reqAst">*</span></label>
                        <InputText id="addressOne" type="text" @bind-Value="address.LineOne" class="form-control input" />
                    </div>
                    <div class="mb-3">
                        <label for="addressTwo">Address Line 2 (optional)</label>
                        <InputText id="addressTwo" type="text" @bind-Value="address.LineTwo" class="form-control input" />
                    </div>
                    @* </div> *@
                    @* <div class="form-city-zip"> *@
                    <div class="mb-3">
                        <label for="city">City<span class="reqAst">*</span></label>
                        <InputText id="city" type="text" @bind-Value="address.City" class="form-control input" />
                    </div>
                    <div class="mb-3">
                        <label for="zip">ZIP Code<span class="reqAst">*</span></label>
                        <InputText id="zip" type="text" @bind-Value="address.Zip" class="form-control input" />
                    </div>
                    @* </div> *@
                    <div class="form-state">
                        <div class="mb-3">
                            <label for="state">State<span class="reqAst">*</span></label>
                            <InputSelect class="form-select select" @bind-Value="address.State" name="state" id="state">
                                <option>Select State</option>
                                <option value="AL">Alabama</option>
                                <option value="AK">Alaska</option>
                                <option value="AZ">Arizona</option>
                                <option value="AR">Arkansas</option>
                                <option value="CA">California</option>
                                <option value="CO">Colorado</option>
                                <option value="CT">Connecticut</option>
                                <option value="DE">Delaware</option>
                                <option value="DC">District Of Columbia</option>
                                <option value="FL">Florida</option>
                                <option value="GA">Georgia</option>
                                <option value="HI">Hawaii</option>
                                <option value="ID">Idaho</option>
                                <option value="IL">Illinois</option>
                                <option value="IN">Indiana</option>
                                <option value="IA">Iowa</option>
                                <option value="KS">Kansas</option>
                                <option value="KY">Kentucky</option>
                                <option value="LA">Louisiana</option>
                                <option value="ME">Maine</option>
                                <option value="MD">Maryland</option>
                                <option value="MA">Massachusetts</option>
                                <option value="MI">Michigan</option>
                                <option value="MN">Minnesota</option>
                                <option value="MS">Mississippi</option>
                                <option value="MO">Missouri</option>
                                <option value="MT">Montana</option>
                                <option value="NE">Nebraska</option>
                                <option value="NV">Nevada</option>
                                <option value="NH">New Hampshire</option>
                                <option value="NJ">New Jersey</option>
                                <option value="NM">New Mexico</option>
                                <option value="NY">New York</option>
                                <option value="NC">North Carolina</option>
                                <option value="ND">North Dakota</option>
                                <option value="OH">Ohio</option>
                                <option value="OK">Oklahoma</option>
                                <option value="OR">Oregon</option>
                                <option value="PA">Pennsylvania</option>
                                <option value="RI">Rhode Island</option>
                                <option value="SC">South Carolina</option>
                                <option value="SD">South Dakota</option>
                                <option value="TN">Tennessee</option>
                                <option value="TX">Texas</option>
                                <option value="UT">Utah</option>
                                <option value="VT">Vermont</option>
                                <option value="VA">Virginia</option>
                                <option value="WA">Washington</option>
                                <option value="WV">West Virginia</option>
                                <option value="WI">Wisconsin</option>
                                <option value="WY">Wyoming</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div></div>
                    <div class="form-submit">
                        <button type="submit" class="btn">Confirm Shipping Info</button>
                    </div>
                    <ValidationSummary />
                </EditForm>
            </div>

            <div class="confirmed-address @EditShippingCssClass">
                <div class="ship-to">
                    Ship to:
                </div>
                <div class="address">
                    <div class="name">Dew Guy</div>
                    <div class="addressOne">8321 Cavaricci Ave, </div>
                    <div class="addressTwo"></div>
                    <div class="city-state-zip">Las Vegas, NV 89129</div>
                    <div class="phone">(702) 526-7986</div>
                </div>
            </div>
            <div>
                <button type="button" class="btn proceed-btn @EditShippingCssClass">Proceed to Checkout</button>
            </div>
        </div>

        <div class="checkout-info">
            <div class="order-summary">
                <h3>Order Summary</h3>
                <hr />
                <table>
                    <tbody>
                        <tr>
                            <th class="subtotal-key">
                                subtotal
                            </th>
                            <td class="subtotal-value">$@cartProducts.Sum(p => p.Price)</td>
                        </tr>
                        <tr>
                            <th class="shipping-key">
                                shipping
                            </th>
                            @if (shippingCost == default)
                            {
                                <td class="shipping-value">Calculated in Checkout</td>
                            }
                            else
                            {
                                <td class="shipping-value">@shippingCost</td>
                            }

                        </tr>
                        <tr>
                            <th class="taxes-key">
                                taxes
                            </th>
                            <td class="taxes-value">Calculated in Checkout</td>
                        </tr>
                    </tbody>
                </table>
                <br />
                <hr />
                <table>
                    <tbody>
                        <tr>
                            <th class="total-key">
                                Estimated Total
                            </th>
                            <td class="total-value">$70.00</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="cart-info">
                <div class="cart-header">
                    <div class="cart-count">
                        <h3>Cart (@cartProducts.Count)</h3>
                    </div>
                    <div class="edit-cart">
                        <a href="/cart">Edit</a>
                    </div>
                </div>
                <hr />

                @* TODO: item card spacing *@
                <div class="cart-items">

                    @foreach (var product in cartProducts)
                    {
                        <div class="item">
                            <div class="item-img-wrapper">
                                <img class="item-img" src="@product.ImageUrl" />
                            </div>
                            <div class="item-details">
                                <div class="title">
                                    @product.Title
                                </div>
                                <div class="description">
                                    @product.Description
                                </div>
                                <div class="size">
                                    Size: @product.Size
                                </div>
                                <div class="price">
                                    $@product.Price
                                </div>
                            </div>
                        </div>
                    }             
                    
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Address address = new ();
    List<CartProductResponse> cartProducts = new List<CartProductResponse>();
    decimal shippingCost = default;

    event Action OnChange;


    private bool confirmShipping = false;
    private bool editShipping = true;

    private string? ConfirmShippingCssClass => confirmShipping ? "hide" : null;
    private string? EditShippingCssClass => editShipping ? "hide" : null;

    protected override async Task OnInitializedAsync()
    {
        OnChange += StateHasChanged;
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();

        // if (cartProducts == null || cartProducts.Count == 0)
        // {
        //     message = "Your cart is empty.";
        // }
    }

    private void InvalidSubmit()
    {
        Console.WriteLine("Invalid Submit");
    }

    private async void ConfirmShipping()
    {
        confirmShipping = !confirmShipping;
        editShipping = !editShipping;

        await JsRuntime.InvokeVoidAsync("scrollUp");

        // TODO: Move logic to service
        ShippingInfoDTO shippingInfo = new ShippingInfoDTO
            {
                LineOne = address.LineOne,
                LineTwo = address.LineTwo,
                City = address.City,
                Zip = int.Parse(address.Zip)
        };
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("https://localhost:7065");

        var result = await httpClient.PostAsJsonAsync("api/shipping/validate-address", shippingInfo);
        var response = (await result.Content.ReadFromJsonAsync<ServiceResponse<string>>()).Data;

        Console.WriteLine("!!! Response: " + response);

        if (decimal.TryParse(response, out decimal cost))
        {

            shippingCost = cost;
            Console.WriteLine("!!! Cost: " + cost);

            OnChange.Invoke();
        }
    }

    private void EditShipping()
    {
        editShipping = !editShipping;
        confirmShipping = !confirmShipping;
    }

    public void Dispose()
    {
        OnChange -= StateHasChanged;
    }
}
