@page "/orders/{page:int}"
@inject IOrderService OrderService
@attribute [Authorize]
@implements IDisposable

<div class="container">

    <h3>Your Orders</h3>

    @* <div class="filter-dropdowns">

        <div class="input-group mb-3 search-order-num">
            <input type="text" class="form-control" placeholder="Search by Order #" aria-label="Search by Order #" aria-describedby="button-addon2">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2">Search</button>
        </div>

        <div class="dropdown">
            <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                Filter Status
            </button>
            <ul class="dropdown-menu">
                @foreach (var status in Enum.GetNames(typeof(Status)))
                {
                    <li><a class="dropdown-item @status" @onclick="@(() => FilterStatus(status))">@status</a></li>
                }
            </ul>
        </div>

        <div class="dropdown">
            <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                Sort By
            </button>
            <ul class="dropdown-menu">
                <li><h5 class="dropdown-header">Date</h5></li>
                <li><a class="dropdown-item" disabled="@OrderByNewest" @onclick="@(() => SortOrder(true))">Newest to Oldest</a></li>
                <li><a class="dropdown-item" disabled="!@OrderByNewest" @onclick="@(() => SortOrder(false))">Oldest to Newest</a></li>
            </ul>
        </div>
    </div> *@
    <hr />


    @if (OrderService.Orders == null || OrderService.Orders.Count == 0)
    {
        <span>@OrderService.Message</span>
    }
    else
    {
        @foreach (var order in OrderService.Orders)
        {
            <div class="order-wrapper">
                <div class="img-wrapper">
                    <img src="@order.ProductImageUrl" />
                </div>
                <div class="details">
                    <h5>Date: @order.OrderDate</h5>
                    <h5>Order Number: @order.Id</h5>
                    <h5>@order.Product</h5>

                    <h5>Status: Order <strong>@order.Status</strong></h5>
                </div>
                <div class="order-price">
                    <p>$@order.TotalPrice</p>
                    <a href="/order/@order.Id" class="order-link btn btn-dark">
                        Details
                    </a>
                </div>
            </div>
        }
    }

    <div class="page-buttons">
        @if (OrderService.PageCount > 1)
        {
            @for (int i = 1; i <= OrderService.PageCount; i++)
            {
                <a class="btn @(i == OrderService.CurrentPage ? "btn-dark" : "btn-outline-dark") page-selection"
                   href=@($"/orders/{i}")>@i</a>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int Page { get; set; } = 1;

    public string? StatusFilter = null;
    public bool OrderByNewest = true;

    protected override async Task OnParametersSetAsync()
    {
        OrderPageRequest request = new OrderPageRequest
            {
                Page = Page
            };

        await OrderService.GetOrders(request);
    }

    protected override void OnInitialized()
    {
        OrderService.OrdersChanged += StateHasChanged;
    }

    public async Task FilterStatus(string status)
    {
        StatusFilter = status;

        OrderPageRequest request = new OrderPageRequest
            {
                Page = Page,
                StatusFilter = status,
                OrderByNewest = OrderByNewest
            };

        await OrderService.GetOrders(request);
    }

    public async Task SortOrder(bool byNewest)
    {
        OrderByNewest = byNewest;

        OrderPageRequest request = new OrderPageRequest
            {
                Page = Page,
                StatusFilter = StatusFilter,
                OrderByNewest = byNewest
            };

        await OrderService.GetOrders(request);
    }

    public void Dispose()
    {
        OrderService.OrdersChanged -= StateHasChanged;
    }
}
