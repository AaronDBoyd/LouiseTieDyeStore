@page "/admin/products"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<div class="container">

    <h3>Products</h3>

    <div style="display:flex;justify-content:space-between">
        <a href="/admin/product" class="btn btn-primary ">
            <i class="oi oi-plus"></i> Add new product
        </a>
        <div class="filter-dropdowns">
            <div class="dropdown">
                <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                    Filter Sold
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterSold("All"))'
                                disabled="@(soldFilter == "All")">
                            All
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterSold("Sold"))'
                                disabled="@(soldFilter == "Sold")">
                            Sold
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterSold("Not Sold"))'
                                disabled="@(soldFilter == "Not Sold")">
                            Not Sold
                        </button>
                    </li>
                </ul>
            </div>

            <div class="dropdown">
                <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                    Filter Visible
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterVisible("All"))'
                                disabled="@(visibleFilter == "All")">
                            All
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterVisible("Visible"))'
                                disabled="@(visibleFilter == "Visible")">
                            Visible
                        </button>
                    </li>
                    <li>
                        <button class="dropdown-item" type="button"
                                @onclick='(() => FilterVisible("Not Visible"))'
                                disabled="@(visibleFilter == "Not Visible")">
                            Not Visible
                        </button>
                    </li>
                </ul>
            </div>


        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Product</th>
                    <th>Category</th>
                    <th>Type</th>
                    <th>Price</th>
                    <th>Original Price</th>
                    <th>Visible</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="filteredProducts" Context="product">
                    <tr>
                        <td>
                            <img src="@product.Images.First(i => i.IsMainImage).Url" />
                        </td>
                        <td>@product.Title</td>
                        <td>@product.Category.Name</td>
                        <td>@product.ProductType.Name</td>
                        <td>@product.Price</td>
                        <td>@product.OriginalPrice</td>
                        <td>@(product.Visible ? "✔️" : "")</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => EditProduct(product.Id))">
                                <i class="oi oi-pencil"></i>
                            </button>
                        </td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>

</div>

@code {
    List<Product> filteredProducts = new();
    string soldFilter = "All"; // ["All", "Sold", "Not Sold"]
    string visibleFilter = "All"; // ["All", "Visibe", "Not Visible"]

    protected override async Task OnInitializedAsync()
    {
        await ProductService.GetAdminProducts();
        filteredProducts = ProductService.AdminProducts;
    }

    void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"admin/product/{productId}");
    }

    void FilterSold(string filter)
    {
        soldFilter = filter;
        FilterProducts();
    }

    void FilterVisible(string filter)
    {
        visibleFilter = filter;
        FilterProducts();
    }

    void FilterProducts()
    {
        if (soldFilter == "All" && visibleFilter == "All")
        {
            filteredProducts = ProductService.AdminProducts;
        }

        if (soldFilter == "All" && visibleFilter == "Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => p.Visible).ToList();
        }

        if (soldFilter == "All" && visibleFilter == "Not Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => !p.Visible).ToList();
        }


        if (soldFilter == "Sold" && visibleFilter == "All")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => p.Sold).ToList();
        }

        if (soldFilter == "Sold" && visibleFilter == "Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => p.Sold && p.Visible).ToList();
        }

        if (soldFilter == "Sold" && visibleFilter == "Not Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => p.Sold && !p.Visible).ToList();
        }


        if (soldFilter == "Not Sold" && visibleFilter == "All")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => !p.Sold).ToList();
        }

        if (soldFilter == "Not Sold" && visibleFilter == "Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => !p.Sold && p.Visible).ToList();
        }

        if (soldFilter == "Not Sold" && visibleFilter == "Not Visible")
        {
            filteredProducts = ProductService.AdminProducts.Where(p => !p.Sold && !p.Visible).ToList();
        }
    }
}
