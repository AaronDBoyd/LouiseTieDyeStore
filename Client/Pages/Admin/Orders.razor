@page "/admin/orders/{page:int}"
@page "/admin/orders/search/{searchText}/{page:int}"
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<div class="container">

    @if (SearchText != null)
    {
        <h2 class="m-3">@OrderService.LastSearchText</h2>
    }
    else
    {
        <h2 class="m-3">All Orders</h2>
    }
    
    <div class="filter-dropdowns">

        <div class="input-group mb-3 search-order-num">
            <input type="search" 
                class="form-control" 
                placeholder="Search Order #, Name, Email" 
                aria-label="Search Order #, Name, Email" 
                aria-describedby="button-addon2"
                   list="orders"
                   @onkeyup="HandleSearch"
                   @ref="searchInput"
                   @bind-value="searchTxt"
                   @bind-value:event="oninput">
            <button class="btn btn-outline-secondary" 
                    type="button" 
                    id="button-addon2"
                    @onclick="@(() => SearchOrders())">
                Search
            </button>
            <datalist id="orders">
                @foreach (var suggestion in suggestions)
                {
                    <option>@suggestion</option>
                }
            </datalist>
        </div>

        <div class="dropdown">
            <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                Filter Status
            </button>
            <ul class="dropdown-menu">
                @foreach (var status in Enum.GetNames(typeof(Status)))
                {
                    <li><a class="dropdown-item @status" @onclick="@(() => FilterStatus(status))">@status</a></li>
                }
            </ul>
        </div>

        <div class="dropdown">
            <button type="button" class="btn dropdown-toggle" data-bs-toggle="dropdown">
                Sort By
            </button>
            <ul class="dropdown-menu">
                <li><h5 class="dropdown-header">Date</h5></li>
                <li><a class="dropdown-item" disabled="@OrderByNewest" @onclick="@(() => SortOrder(true))">Newest to Oldest</a></li>
                <li><a class="dropdown-item" disabled="!@OrderByNewest" @onclick="@(() => SortOrder(false))">Oldest to Newest</a></li>
            </ul>
        </div>
    </div>
    <hr />

    @if (OrderService.Orders == null || OrderService.Orders.Count == 0)
    {
        <span>@OrderService.Message</span>
    }
    else
    {
        @foreach (var order in OrderService.Orders)
        {
            <div class="order-wrapper @order.Status">
                <div class="img-wrapper">
                    <img src="@order.OrderImageUrl" />
                </div>
                <div class="details">
                    <h6>Date: @TimeZoneInfo.ConvertTime(order.OrderDate, TimeZoneInfo.FindSystemTimeZoneById("America/Los_Angeles"))</h6>
                    <p>Order Number: @order.Id</p>
                    <h6>@order.OrderTitle</h6>
                    <h6>For: @order.CustomerName</h6>
                    <h6>Status: Order <strong>@order.Status</strong></h6>
                </div>
                <div class="order-price">
                    <p>$@order.TotalPrice</p>
                    <a href="/order/@order.Id" class="order-link btn btn-dark">
                        Details
                    </a>
                </div>
            </div>
        }
    }

    <div class="page-buttons">
        @if (OrderService.PageCount > 1)
        {
            @for (int i = 1; i <= OrderService.PageCount; i++)
            {
                <a class="btn @(i == OrderService.CurrentPage ? "btn-dark" : "btn-outline-dark") page-selection"
                   href=@(SearchText != null ? $"/admin/orders/search/{OrderService.LastSearchText}/{i}" : $"/admin/orders/{i}")>@i</a>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public string? SearchText { get; set; } = null;

    public string? StatusFilter = null;
    public bool OrderByNewest = true;

    private string searchTxt = string.Empty;
    private List<string> suggestions = new List<string>();
    protected ElementReference searchInput;

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            SearchOrders();
        }
        else if (searchTxt.Length > 1)
        {
            suggestions = await OrderService.GetOrderSearchSuggestions(searchTxt);
        }
    }

    public void SearchOrders()
    {
        NavigationManager.NavigateTo($"/admin/orders/search/{searchTxt}/1");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SearchText != null)
        {
            await OrderService.SearchOrders(SearchText, Page);
        }
        else
        {
            OrderPageRequest request = new OrderPageRequest
                {
                    Page = Page
                };

            await OrderService.GetAdminOrders(request);
        }       
    }

    protected override void OnInitialized()
    {
        OrderService.OrdersChanged += StateHasChanged;
    }

    public async Task FilterStatus(string status)
    {
        StatusFilter = status;

        OrderPageRequest request = new OrderPageRequest
            {
                Page = Page,
                StatusFilter = status,
                OrderByNewest = OrderByNewest
            };

        await OrderService.GetAdminOrders(request);
    }

    public async Task SortOrder(bool byNewest)
    {
        OrderByNewest = byNewest;

        OrderPageRequest request = new OrderPageRequest
            {
                Page = Page,
                StatusFilter = StatusFilter,
                OrderByNewest = byNewest
            };

        await OrderService.GetAdminOrders(request);
    }

    public void Dispose()
    {
        OrderService.OrdersChanged -= StateHasChanged;
    }
}
